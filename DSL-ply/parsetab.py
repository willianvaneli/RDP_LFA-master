
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftIGUALMENORMAIORMENORIGUALMAIORIGUALleftPLUSMINUSleftDIVIDEINTQUOTIENTleftMULTIPLYDIVIDEleftEXPONENTleftLPARRPARleftLCHAVESRCHAVESCOMMA DEF DIVIDE DIVIDEINT ENDLINE EQUALS EXPONENT IF IGUAL LCHAVES LPAR MAIOR MAIORIGUAL MENOR MENORIGUAL MINUS MULTIPLY NAME NUMBER PLUS QUOTIENT RCHAVES RETURN RPAR WHILE\n    contexto    : deffuncao\n                | bloco\n                | empty\n    \n    bloco   : linha ENDLINE bloco\n    \n    bloco   : linha\n    \n    linha   : funcao\n            | if\n            | while\n            | return\n            | var_assign\n            | expression\n    \n    return  : RETURN term COMMA return\n    \n    return  : RETURN term\n    \n    funcao  : NAME LPAR values RPAR\n    \n    values  : NAME COMMA values\n    \n    values  : NUMBER COMMA values\n    \n    values  : NUMBER\n    \n    values  : NAME\n    \n    deffuncao   : DEF NAME LPAR args RPAR LCHAVES bloco RCHAVES\n    \n    args    : NAME COMMA args\n    \n    args :   NAME\n    \n    expression  : term\n    \n    if  : IF LPAR bloco RPAR LCHAVES bloco RCHAVES\n    \n    while   : WHILE LPAR bloco RPAR LCHAVES bloco RCHAVES\n    \n    var_assign  : NAME EQUALS term\n                | NAME EQUALS funcao\n    \n    term    : term EXPONENT term\n            | term MULTIPLY term\n            | term DIVIDE term\n            | term DIVIDEINT term\n            | term QUOTIENT term\n            | term MINUS term\n            | term PLUS term\n            | term IGUAL term\n            | term MENOR term\n            | term MAIOR term\n            | term MENORIGUAL term\n            | term MAIORIGUAL term\n    \n    term    : factor\n    \n    factor  : nterm\n            | NUMBER\n            | positive\n            | negative\n    \n    negative    : MINUS term\n    \n    positive    : PLUS term\n    \n    nterm : LPAR term RPAR\n    \n    term    : NAME\n    \n    empty   :\n    '
    
_lr_action_items = {'DEF':([0,],[5,]),'$end':([0,1,2,3,4,6,8,9,10,11,12,13,14,18,21,22,23,24,25,30,34,47,48,53,54,55,56,57,61,62,63,64,65,66,67,68,69,70,71,72,76,80,92,93,94,],[-48,0,-1,-2,-3,-47,-5,-6,-7,-8,-9,-10,-11,-22,-39,-40,-41,-42,-43,-47,-13,-44,-45,-47,-25,-26,-46,-4,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-14,-12,-23,-24,-19,]),'NAME':([0,5,7,17,19,20,27,28,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,49,75,77,81,85,86,88,],[6,26,30,30,30,30,50,53,6,6,6,30,30,30,30,30,30,30,30,30,30,30,30,73,50,50,73,6,6,6,]),'IF':([0,31,32,33,85,86,88,],[15,15,15,15,15,15,15,]),'WHILE':([0,31,32,33,85,86,88,],[16,16,16,16,16,16,16,]),'RETURN':([0,31,32,33,60,85,86,88,],[17,17,17,17,17,17,17,17,]),'NUMBER':([0,7,17,19,20,27,28,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,75,77,85,86,88,],[23,23,23,23,23,52,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,52,52,23,23,23,]),'LPAR':([0,6,7,15,16,17,19,20,26,28,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,53,85,86,88,],[7,27,7,32,33,7,7,7,49,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,27,7,7,7,]),'PLUS':([0,6,7,17,18,19,20,21,22,23,24,25,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,53,54,56,61,62,63,64,65,66,67,68,69,70,71,72,85,86,88,],[20,-47,20,20,41,20,20,-39,-40,-41,-42,-43,20,41,-47,20,20,20,41,20,20,20,20,20,20,20,20,20,20,20,20,-44,-45,-47,41,-46,-27,-28,-29,-30,-31,-32,-33,41,41,41,41,41,20,20,20,]),'MINUS':([0,6,7,17,18,19,20,21,22,23,24,25,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,53,54,56,61,62,63,64,65,66,67,68,69,70,71,72,85,86,88,],[19,-47,19,19,40,19,19,-39,-40,-41,-42,-43,19,40,-47,19,19,19,40,19,19,19,19,19,19,19,19,19,19,19,19,-44,-45,-47,40,-46,-27,-28,-29,-30,-31,-32,-33,40,40,40,40,40,19,19,19,]),'EQUALS':([6,],[28,]),'EXPONENT':([6,18,21,22,23,24,25,29,30,34,47,48,53,54,56,61,62,63,64,65,66,67,68,69,70,71,72,],[-47,35,-39,-40,-41,-42,-43,35,-47,35,35,35,-47,35,-46,-27,35,35,35,35,35,35,35,35,35,35,35,]),'MULTIPLY':([6,18,21,22,23,24,25,29,30,34,47,48,53,54,56,61,62,63,64,65,66,67,68,69,70,71,72,],[-47,36,-39,-40,-41,-42,-43,36,-47,36,36,36,-47,36,-46,-27,-28,-29,36,36,36,36,36,36,36,36,36,]),'DIVIDE':([6,18,21,22,23,24,25,29,30,34,47,48,53,54,56,61,62,63,64,65,66,67,68,69,70,71,72,],[-47,37,-39,-40,-41,-42,-43,37,-47,37,37,37,-47,37,-46,-27,-28,-29,37,37,37,37,37,37,37,37,37,]),'DIVIDEINT':([6,18,21,22,23,24,25,29,30,34,47,48,53,54,56,61,62,63,64,65,66,67,68,69,70,71,72,],[-47,38,-39,-40,-41,-42,-43,38,-47,38,38,38,-47,38,-46,-27,-28,-29,-30,-31,38,38,38,38,38,38,38,]),'QUOTIENT':([6,18,21,22,23,24,25,29,30,34,47,48,53,54,56,61,62,63,64,65,66,67,68,69,70,71,72,],[-47,39,-39,-40,-41,-42,-43,39,-47,39,39,39,-47,39,-46,-27,-28,-29,-30,-31,39,39,39,39,39,39,39,]),'IGUAL':([6,18,21,22,23,24,25,29,30,34,47,48,53,54,56,61,62,63,64,65,66,67,68,69,70,71,72,],[-47,42,-39,-40,-41,-42,-43,42,-47,42,-44,-45,-47,42,-46,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,]),'MENOR':([6,18,21,22,23,24,25,29,30,34,47,48,53,54,56,61,62,63,64,65,66,67,68,69,70,71,72,],[-47,43,-39,-40,-41,-42,-43,43,-47,43,-44,-45,-47,43,-46,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,]),'MAIOR':([6,18,21,22,23,24,25,29,30,34,47,48,53,54,56,61,62,63,64,65,66,67,68,69,70,71,72,],[-47,44,-39,-40,-41,-42,-43,44,-47,44,-44,-45,-47,44,-46,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,]),'MENORIGUAL':([6,18,21,22,23,24,25,29,30,34,47,48,53,54,56,61,62,63,64,65,66,67,68,69,70,71,72,],[-47,45,-39,-40,-41,-42,-43,45,-47,45,-44,-45,-47,45,-46,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,]),'MAIORIGUAL':([6,18,21,22,23,24,25,29,30,34,47,48,53,54,56,61,62,63,64,65,66,67,68,69,70,71,72,],[-47,46,-39,-40,-41,-42,-43,46,-47,46,-44,-45,-47,46,-46,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,]),'ENDLINE':([6,8,9,10,11,12,13,14,18,21,22,23,24,25,30,34,47,48,53,54,55,56,61,62,63,64,65,66,67,68,69,70,71,72,76,80,92,93,],[-47,31,-6,-7,-8,-9,-10,-11,-22,-39,-40,-41,-42,-43,-47,-13,-44,-45,-47,-25,-26,-46,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-14,-12,-23,-24,]),'RPAR':([6,8,9,10,11,12,13,14,18,21,22,23,24,25,29,30,34,47,48,50,51,52,53,54,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,80,83,84,87,92,93,],[-47,-5,-6,-7,-8,-9,-10,-11,-22,-39,-40,-41,-42,-43,56,-47,-13,-44,-45,-18,76,-17,-47,-25,-26,-46,-4,78,79,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-21,82,-14,-12,-15,-16,-20,-23,-24,]),'RCHAVES':([6,8,9,10,11,12,13,14,18,21,22,23,24,25,30,34,47,48,53,54,55,56,57,61,62,63,64,65,66,67,68,69,70,71,72,76,80,89,90,91,92,93,],[-47,-5,-6,-7,-8,-9,-10,-11,-22,-39,-40,-41,-42,-43,-47,-13,-44,-45,-47,-25,-26,-46,-4,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-14,-12,92,93,94,-23,-24,]),'COMMA':([21,22,23,24,25,30,34,47,48,50,52,56,61,62,63,64,65,66,67,68,69,70,71,72,73,],[-39,-40,-41,-42,-43,-47,60,-44,-45,75,77,-46,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,81,]),'LCHAVES':([78,79,82,],[85,86,88,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'contexto':([0,],[1,]),'deffuncao':([0,],[2,]),'bloco':([0,31,32,33,85,86,88,],[3,57,58,59,89,90,91,]),'empty':([0,],[4,]),'linha':([0,31,32,33,85,86,88,],[8,8,8,8,8,8,8,]),'funcao':([0,28,31,32,33,85,86,88,],[9,55,9,9,9,9,9,9,]),'if':([0,31,32,33,85,86,88,],[10,10,10,10,10,10,10,]),'while':([0,31,32,33,85,86,88,],[11,11,11,11,11,11,11,]),'return':([0,31,32,33,60,85,86,88,],[12,12,12,12,80,12,12,12,]),'var_assign':([0,31,32,33,85,86,88,],[13,13,13,13,13,13,13,]),'expression':([0,31,32,33,85,86,88,],[14,14,14,14,14,14,14,]),'term':([0,7,17,19,20,28,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,85,86,88,],[18,29,34,47,48,54,18,18,18,61,62,63,64,65,66,67,68,69,70,71,72,18,18,18,]),'factor':([0,7,17,19,20,28,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,85,86,88,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'nterm':([0,7,17,19,20,28,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,85,86,88,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'positive':([0,7,17,19,20,28,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,85,86,88,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'negative':([0,7,17,19,20,28,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,85,86,88,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'values':([27,75,77,],[51,83,84,]),'args':([49,81,],[74,87,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> contexto","S'",1,None,None,None),
  ('contexto -> deffuncao','contexto',1,'p_contexto','PARSER.PY',120),
  ('contexto -> bloco','contexto',1,'p_contexto','PARSER.PY',121),
  ('contexto -> empty','contexto',1,'p_contexto','PARSER.PY',122),
  ('bloco -> linha ENDLINE bloco','bloco',3,'p_bloco_linhas','PARSER.PY',129),
  ('bloco -> linha','bloco',1,'p_bloco_linha','PARSER.PY',136),
  ('linha -> funcao','linha',1,'p_linha','PARSER.PY',143),
  ('linha -> if','linha',1,'p_linha','PARSER.PY',144),
  ('linha -> while','linha',1,'p_linha','PARSER.PY',145),
  ('linha -> return','linha',1,'p_linha','PARSER.PY',146),
  ('linha -> var_assign','linha',1,'p_linha','PARSER.PY',147),
  ('linha -> expression','linha',1,'p_linha','PARSER.PY',148),
  ('return -> RETURN term COMMA return','return',4,'p_return','PARSER.PY',157),
  ('return -> RETURN term','return',2,'p_return_return','PARSER.PY',163),
  ('funcao -> NAME LPAR values RPAR','funcao',4,'p_funcao','PARSER.PY',170),
  ('values -> NAME COMMA values','values',3,'p_values_value_name','PARSER.PY',177),
  ('values -> NUMBER COMMA values','values',3,'p_values_value_number','PARSER.PY',183),
  ('values -> NUMBER','values',1,'p_values_number','PARSER.PY',189),
  ('values -> NAME','values',1,'p_values_name','PARSER.PY',195),
  ('deffuncao -> DEF NAME LPAR args RPAR LCHAVES bloco RCHAVES','deffuncao',8,'p_deffuncao','PARSER.PY',203),
  ('args -> NAME COMMA args','args',3,'p_args','PARSER.PY',210),
  ('args -> NAME','args',1,'p_args_arg','PARSER.PY',216),
  ('expression -> term','expression',1,'p_expression','PARSER.PY',223),
  ('if -> IF LPAR bloco RPAR LCHAVES bloco RCHAVES','if',7,'p_if','PARSER.PY',231),
  ('while -> WHILE LPAR bloco RPAR LCHAVES bloco RCHAVES','while',7,'p_while','PARSER.PY',237),
  ('var_assign -> NAME EQUALS term','var_assign',3,'p_var_assign','PARSER.PY',250),
  ('var_assign -> NAME EQUALS funcao','var_assign',3,'p_var_assign','PARSER.PY',251),
  ('term -> term EXPONENT term','term',3,'p_term','PARSER.PY',258),
  ('term -> term MULTIPLY term','term',3,'p_term','PARSER.PY',259),
  ('term -> term DIVIDE term','term',3,'p_term','PARSER.PY',260),
  ('term -> term DIVIDEINT term','term',3,'p_term','PARSER.PY',261),
  ('term -> term QUOTIENT term','term',3,'p_term','PARSER.PY',262),
  ('term -> term MINUS term','term',3,'p_term','PARSER.PY',263),
  ('term -> term PLUS term','term',3,'p_term','PARSER.PY',264),
  ('term -> term IGUAL term','term',3,'p_term','PARSER.PY',265),
  ('term -> term MENOR term','term',3,'p_term','PARSER.PY',266),
  ('term -> term MAIOR term','term',3,'p_term','PARSER.PY',267),
  ('term -> term MENORIGUAL term','term',3,'p_term','PARSER.PY',268),
  ('term -> term MAIORIGUAL term','term',3,'p_term','PARSER.PY',269),
  ('term -> factor','term',1,'p_term_factor','PARSER.PY',276),
  ('factor -> nterm','factor',1,'p_factor','PARSER.PY',283),
  ('factor -> NUMBER','factor',1,'p_factor','PARSER.PY',284),
  ('factor -> positive','factor',1,'p_factor','PARSER.PY',285),
  ('factor -> negative','factor',1,'p_factor','PARSER.PY',286),
  ('negative -> MINUS term','negative',2,'p_negative','PARSER.PY',293),
  ('positive -> PLUS term','positive',2,'p_positive','PARSER.PY',299),
  ('nterm -> LPAR term RPAR','nterm',3,'p_nterm','PARSER.PY',306),
  ('term -> NAME','term',1,'p_term_var','PARSER.PY',313),
  ('empty -> <empty>','empty',0,'p_empty','PARSER.PY',322),
]
